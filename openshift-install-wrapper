#!/usr/bin/env bash

# Description:    Script to run IPI installations from OpenShift 4 where supported
# Author:         Sergio Garcia (soukron@gmbros.net)
# Source/License: https://github.com/soukron/openshift-install-wrapper

# exit immediately on error
set -e

# detect whether output is piped or not.
[[ -t 1 ]] && PIPED=0 || PIPED=1

# some directories
__scriptdir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )
__basedir=~/.local/ocp4
__configdir=${HOME}/.config/openshift-install-wrapper/config
__bindir=${__basedir}/bin
__clustersdir=${__basedir}/clusters

# binaries url
__baseurl=https://mirror.openshift.com/pub/openshift-v4/clients/ocp

# defaults
VERSION=1.5.1
VERBOSE=0
QUIET=0
FORCE=0
TMPDIR=
declare -A CONFIGFILES
declare -A INSTALLOPTS
declare -A INSTALLTEMPLATES

# sample credentials files
CONFIGFILES[aws]="${HOME}/.aws/credentials;W2RlZmF1bHRdCmF3c19hY2Nlc3Nfa2V5X2lkID0gMTIzNDU2Nzg5MEFCQ0RFRkdISUoKYXdzX3NlY3JldF9hY2Nlc3Nfa2V5ID0gMTIzNDU2Nzg5MEFCQ0RFRkdISUpLTE1OT2FiY2RlZmdoaWprbG1ubwo="
CONFIGFILES[azure]="${HOME}/.azure/osServicePrincipal.json;eyJzdWJzY3JpcHRpb25JZCI6IjEyMzQ1YWJjLTEyYWItMTJhYi0xMmFiLTEyMzQ1NmFiY2RlZiIsImNsaWVudElkIjoiMTIzNGFiY2QtMTJhYi0xMmFiLTEyYWItMTIzNDU2YWJjZGVmIiwiY2xpZW50U2VjcmV0IjoiMUFfMTIzNDU2YWJjZGVmZzEyMzQ1NTZhYmMuW1x1MDAzY1x1MDAyNmRAWkoja1x1MDAzZSIsInRlbmFudElkIjoiMTIzNDVhYmMtMTJhYi0xMmFiLTEyYWItMTIzNDU2YWJjZGVmIn0K"
CONFIGFILES[ovirt]="${HOME}/.ovirt/ovirt-config.yaml;b3ZpcnRfdXJsOiBodHRwczovL09WSVJUX0ZRRE4vb3ZpcnQtZW5naW5lL2FwaQpvdmlydF91c2VybmFtZTogYWRtaW5AaW50ZXJuYWwKb3ZpcnRfcGFzc3dvcmQ6IHNlY3JldFBhc3N3b3JkCm92aXJ0X2luc2VjdXJlOiB0cnVlCg=="
CONFIGFILES[openstack]="${HOME}/.config/openstack/clouds.yaml;Y2xvdWRzOgogIHNoaWZ0c3RhY2s6CiAgICBhdXRoOgogICAgICBhdXRoX3VybDogaHR0cDovLzEwLjEwLjE0LjQyOjUwMDAvdjMKICAgICAgcHJvamVjdF9uYW1lOiBzaGlmdHN0YWNrCiAgICAgIHVzZXJuYW1lOiBzaGlmdHN0YWNrX3VzZXIKICAgICAgcGFzc3dvcmQ6IFhYWAogICAgICB1c2VyX2RvbWFpbl9uYW1lOiBEZWZhdWx0CiAgICAgIHByb2plY3RfZG9tYWluX25hbWU6IERlZmF1bHQK"
# see `gcloud init` documentation (https://cloud.google.com/sdk/gcloud/reference/init) for proper instructions
CONFIGFILES[gcp]="${HOME}/.gcp/osServiceAccount.json;ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAicHJvamVjdC1pZCIsCiAgInByaXZhdGVfa2V5X2lkIjogImtleS1pZCIsCiAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxucHJpdmF0ZS1rZXlcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsCiAgImNsaWVudF9lbWFpbCI6ICJzZXJ2aWNlLWFjY291bnQtZW1haWwiLAogICJjbGllbnRfaWQiOiAiY2xpZW50LWlkIiwKICAiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3Rva2VuIiwKICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsCiAgImNsaWVudF94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvc2VydmljZS1hY2NvdW50LWVtYWlsIgp9Cgo="

# install-config templates
INSTALLTEMPLATES[aws-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbXB1dGU6Ci0gaHlwZXJ0aHJlYWRpbmc6IEVuYWJsZWQKICBuYW1lOiB3b3JrZXIKICBwbGF0Zm9ybToKICAgIGF3czoKICAgICAgdHlwZTogbTUuMnhsYXJnZQogIHJlcGxpY2FzOiBXT1JLRVItUkVQTElDQVMKY29udHJvbFBsYW5lOgogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogbWFzdGVyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IE1BU1RFUi1SRVBMSUNBUwptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIG5hbWU6IE5BTUUKbmV0d29ya2luZzoKICBjbHVzdGVyTmV0d29yazoKICAtIGNpZHI6IDEwLjEyOC4wLjAvMTQKICAgIGhvc3RQcmVmaXg6IDIzCiAgbWFjaGluZU5ldHdvcms6CiAgLSBjaWRyOiAxMC4wLjAuMC8xNgogIG5ldHdvcmtUeXBlOiBORVRXT1JLLVRZUEUKICBzZXJ2aWNlTmV0d29yazoKICAtIDE3Mi4zMC4wLjAvMTYKcGxhdGZvcm06CiAgYXdzOgogICAgcmVnaW9uOiBSRUdJT04KICAgIHVzZXJUYWdzOiBUQUdTCnB1Ymxpc2g6IEV4dGVybmFsCg==
INSTALLTEMPLATES[azure-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbXB1dGU6Ci0gYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogd29ya2VyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IFdPUktFUi1SRVBMSUNBUwpjb250cm9sUGxhbmU6CiAgYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogbWFzdGVyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IE1BU1RFUi1SRVBMSUNBUwptZXRhZGF0YToKICBjcmVhdGlvblRpbWVzdGFtcDogbnVsbAogIG5hbWU6IE5BTUUKbmV0d29ya2luZzoKICBjbHVzdGVyTmV0d29yazoKICAtIGNpZHI6IDEwLjEyOC4wLjAvMTQKICAgIGhvc3RQcmVmaXg6IDIzCiAgbWFjaGluZU5ldHdvcms6CiAgLSBjaWRyOiAxMC4wLjAuMC8xNgogIG5ldHdvcmtUeXBlOiBORVRXT1JLLVRZUEUKICBzZXJ2aWNlTmV0d29yazoKICAtIDE3Mi4zMC4wLjAvMTYKcGxhdGZvcm06CiAgYXp1cmU6CiAgICBiYXNlRG9tYWluUmVzb3VyY2VHcm91cE5hbWU6IFJFU09VUkNFR1JPVVAKICAgIHJlZ2lvbjogUkVHSU9OCnB1Ymxpc2g6IEV4dGVybmFsCg==
INSTALLTEMPLATES[ovirt-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbnRyb2xQbGFuZToKICBuYW1lOiBtYXN0ZXIKICBwbGF0Zm9ybToKICAgIG92aXJ0OgogICAgICBjcHU6CiAgICAgICAgY29yZXM6IDQKICAgICAgICBzb2NrZXRzOiAyCiAgICAgIG1lbW9yeU1COiAxNjM4NAogICAgICBvc0Rpc2s6CiAgICAgICAgc2l6ZUdCOiA1MAogICAgICB2bVR5cGU6IHNlcnZlcgogIHJlcGxpY2FzOiBNQVNURVItUkVQTElDQVMKY29tcHV0ZToKLSBuYW1lOiB3b3JrZXIKICBwbGF0Zm9ybToKICAgIG92aXJ0OgogICAgICBjcHU6CiAgICAgICAgY29yZXM6IDQKICAgICAgICBzb2NrZXRzOiA0CiAgICAgIG1lbW9yeU1COiAxNjM4NAogICAgICBvc0Rpc2s6CiAgICAgICAgc2l6ZUdCOiA1MAogICAgICB2bVR5cGU6IHNlcnZlcgogIHJlcGxpY2FzOiBXT1JLRVItUkVQTElDQVMKbWV0YWRhdGE6CiAgbmFtZTogTkFNRQpwbGF0Zm9ybToKICBvdmlydDoKICAgIGFwaV92aXA6IE9WSVJULVZJUC1BUEkKICAgIGluZ3Jlc3NfdmlwOiBPVklSVC1WSVAtSU5HUkVTUwogICAgZG5zX3ZpcDogT1ZJUlQtVklQLUROUwogICAgb3ZpcnRfY2x1c3Rlcl9pZDogT1ZJUlQtQ0xVU1RFUgogICAgb3ZpcnRfc3RvcmFnZV9kb21haW5faWQ6IE9WSVJULVNUT1JBR0VET01BTgogICAgb3ZpcnRfbmV0d29ya19uYW1lOiBPVklSVC1ORVRXT1JLCgo=
INSTALLTEMPLATES[vsphere-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbXB1dGU6Ci0gYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogd29ya2VyCiAgcGxhdGZvcm06IAogICAgdnNwaGVyZTogCiAgICAgIG9zRGlzazoKICAgICAgICBkaXNrU2l6ZUdCOiBWU1BIRVJFLURJU0stU0laRS1HQiAKICByZXBsaWNhczogV09SS0VSLVJFUExJQ0FTCmNvbnRyb2xQbGFuZToKICBhcmNoaXRlY3R1cmU6IGFtZDY0CiAgaHlwZXJ0aHJlYWRpbmc6IEVuYWJsZWQKICBuYW1lOiBtYXN0ZXIKICBwbGF0Zm9ybTogCiAgICB2c3BoZXJlOiAKICAgICAgb3NEaXNrOgogICAgICAgIGRpc2tTaXplR0I6IFZTUEhFUkUtRElTSy1TSVpFLUdCIAogIHJlcGxpY2FzOiBNQVNURVItUkVQTElDQVMKbWV0YWRhdGE6CiAgY3JlYXRpb25UaW1lc3RhbXA6IG51bGwKICBuYW1lOiBOQU1FCm5ldHdvcmtpbmc6CiAgY2x1c3Rlck5ldHdvcms6CiAgLSBjaWRyOiAxMC4xMjguMC4wLzE0CiAgICBob3N0UHJlZml4OiAyMwogIG1hY2hpbmVOZXR3b3JrOgogIC0gY2lkcjogMTAuMC4wLjAvMTYKICBuZXR3b3JrVHlwZTogTkVUV09SSy1UWVBFCiAgc2VydmljZU5ldHdvcms6CiAgLSAxNzIuMzAuMC4wLzE2CnBsYXRmb3JtOgogIHZzcGhlcmU6CiAgICBhcGlWSVA6IFZTUEhFUkUtVklQLUFQSQogICAgY2x1c3RlcjogVlNQSEVSRS1DTFVTVEVSCiAgICBkYXRhY2VudGVyOiBWU1BIRVJFLURBVEFDRU5URVIKICAgIGRlZmF1bHREYXRhc3RvcmU6IFZTUEhFUkUtREFUQVNUT1JFCiAgICBpbmdyZXNzVklQOiBWU1BIRVJFLVZJUC1JTkdSRVNTCiAgICBuZXR3b3JrOiBWU1BIRVJFLU5FVFdPUksKICAgIHBhc3N3b3JkOiBWU1BIRVJFLVBBU1NXT1JECiAgICB1c2VybmFtZTogVlNQSEVSRS1VU0VSCiAgICB2Q2VudGVyOiBWU1BIRVJFLVZDRU5URVIKcHVibGlzaDogRXh0ZXJuYWwK
INSTALLTEMPLATES[openstack-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbXB1dGU6Ci0gYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogd29ya2VyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IFdPUktFUi1SRVBMSUNBUwpjb250cm9sUGxhbmU6CiAgYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogbWFzdGVyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IE1BU1RFUi1SRVBMSUNBUwptZXRhZGF0YToKICBuYW1lOiBOQU1FCm5ldHdvcmtpbmc6CiAgY2x1c3Rlck5ldHdvcms6CiAgLSBjaWRyOiAxMC4xMjguMC4wLzE0CiAgICBob3N0UHJlZml4OiAyMwogIG1hY2hpbmVOZXR3b3JrOgogIC0gY2lkcjogMTkyLjE2OC4wLjAvMTYKICBuZXR3b3JrVHlwZTogTkVUV09SSy1UWVBFCiAgc2VydmljZU5ldHdvcms6CiAgLSAxNzIuMzAuMC4wLzE2CnBsYXRmb3JtOgogIG9wZW5zdGFjazoKICAgIGNsb3VkOiBPU1AtQ0xPVUQKICAgIGNvbXB1dGVGbGF2b3I6IE9TUC1PUy1GTEFWT1IKICAgIGV4dGVybmFsTmV0d29yazogT1NQLUVYVC1ORVRXT1JLCiAgICBjbHVzdGVyT1NJbWFnZTogT1NQLU9TLUlNQUdFCiAgICBsYkZsb2F0aW5nSVA6IE9TUC1BUEktRklQCiAgICBpbmdyZXNzRmxvYXRpbmdJUDogT1NQLUlOR1JFU1MtRklQCg==
INSTALLTEMPLATES[gcp-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbXB1dGU6Ci0gYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogd29ya2VyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IFdPUktFUi1SRVBMSUNBUwpjb250cm9sUGxhbmU6CiAgYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogbWFzdGVyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IE1BU1RFUi1SRVBMSUNBUwptZXRhZGF0YToKICBuYW1lOiBOQU1FCm5ldHdvcmtpbmc6CiAgY2x1c3Rlck5ldHdvcms6CiAgLSBjaWRyOiAxMC4xMjguMC4wLzE0CiAgICBob3N0UHJlZml4OiAyMwogIG1hY2hpbmVOZXR3b3JrOgogIC0gY2lkcjogMTAuMC4wLjAvMTYKICBuZXR3b3JrVHlwZTogTkVUV09SSy1UWVBFCiAgc2VydmljZU5ldHdvcms6CiAgLSAxNzIuMzAuMC4wLzE2CnBsYXRmb3JtOgogIGdjcDoKICAgIHByb2plY3RJRDogR0NQLVBST0pFQ1QtSUQKICAgIHJlZ2lvbjogUkVHSU9OCg==

# custom scripts
test() { for param in ${@}; do echo -e ${param}"\n-----"; done }
#__CUSTOM_SCRIPTS__
# cleanup on exit
cleanup_on_exit() {
  [[ ! -v KEEPTMP ]] && rm -fr ${TMPDIR}
  popd &>/dev/null
  kill 0
}
safe_exit() {
  trap - INT TERM EXIT
  exit
}
trap cleanup_on_exit INT TERM EXIT

# output helpers
out() {
  [[ ${QUIET} -eq 1 ]] && return

  local message="$@"
  if ((PIPED)); then
    message=$(echo $message | sed '
      s/\\[0-9]\{3\}\[[0-9]\(;[0-9]\{2\}\)\?m//g;
      s/✖/Error:/g;
      s/✔/Success:/g;
    ')
  fi
  printf '%b\n' "$message";
}
die() { err "$@ Exiting..."; exit 1; } >&2
err() { out " \033[1;31m✖\033[0m  $@"; } >&2
success() { out " \033[1;32m✔\033[0m  $@"; }
verbose() { [[ ${VERBOSE} -eq 1 ]] && out "$@" || true; }

# oc helper to run commands in a cluster
oc() {
  if [[ ${VERBOSE} -eq 1 ]]; then
    ${client} --kubeconfig ${clusterdir}/auth/kubeconfig "$@" -v=6
  else
    if [[ ${QUIET} -eq 1 ]]; then
      ${client} --kubeconfig ${clusterdir}/auth/kubeconfig "$@" &>/dev/null
    else
      ${client} --kubeconfig ${clusterdir}/auth/kubeconfig "$@"
    fi
  fi
}

# parse a string to export variables defined on it
parse_args_as_variables() {
  if [[ ${1} == *"="* ]]; then
    IFS=':' read -r -a args <<< $( echo "${1}" | cut -d= -f2- )
    for index in "${!args[@]}"; do
      export ${args[$index]%%=*}=${args[$index]##*=}
    done
  fi
}

# usage
usage() {
  cat <<EOF
OpenShift installation wrapper for IPI installations. Version: ${VERSION}

Usage: `basename ${0}` [--init|--install|--destroy|--customize] [options]

Options:
  --name <name>                     - name of the cluster
  --domain <domain>                 - name of the domain for the cluster
  --version <version>               - version to install
  --platform <name>                 - cloud provider

  --region <name>                   - sets the region in the cloud provider
  --master-replicas <number>        - optionally, sets the number of master nodes to deploy
  --worker-replicas <number>        - optionally, sets the number of worker nodes
  --network-type <network type>     - optionally, sets network type: OpenShiftSDN or OVNKubernetes
  --edit-install-config             - optionally, allows to edit the install-config.yaml before starting installation
  --edit-install-manifests          - optionally, allows to edit the install manifests. After generating the manifests, 
                                      the script will stop itself so the user modifies the manifests. 
                                      Once done, user must continue the script with 'fg'.

  --dev-preview                     - required to install any dev-preview release
  --baseurl <url>                   - sets the baseurl to download the binaries (overrides the use of --dev-preview)
                                      default: https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp

  --tags <key>=<value>[,key=value]  - optionally, sets tags on the resources it creates (only implemented for platform=aws)
                                      use multiple options for multiple tags or comma-separated key/value pairs

  --azure-resource-group            - provide the ResourceGroup where the domain exists

  --ovirt-cluster <uuid>            - ovirt cluster UUID
  --ovirt-storagedomain <uuid>      - ovirt storage domain UUID
  --ovirt-network <name>            - ovirt network name
  --ovirt-vip-api <ip>              - IP address the cluster's API
  --ovirt-vip-ingress <ip>          - IP address for the cluster's ingress
  --ovirt-vip-dns <ip>              - IP address for the cluster's dns

  --vsphere-vcenter <name>          - fqdn or IP address of vCenter
  --vsphere-username <username>     - username to login to vCenter
  --vsphere-password <password>     - password to login to vCenter
  --vsphere-cluster <name>          - vCenter cluster name
  --vsphere-datacenter <name>       - vCenter datacenter name
  --vsphere-datastore <name>        - vCenter datastore name
  --vsphere-network <name>          - vCenter network name
  --vsphere-vip-api <ip>            - IP address the cluster's API
  --vsphere-vip-ingress <ip>        - IP address for the cluster's ingress
  --vsphere-disk-size-gb <gb>       - optionally, sets the disk size for the instances

  --osp-vip-api <name>              - floating IP for the cluster's API
  --osp-vip-ingress <name>          - floating IP for the cluster's Ingress
  --osp-cloud <name>                - name of the cloud to use from clouds.yaml
  --osp-ext-network <name>          - name of the external network to be used
  --osp-os-image <name>             - name or location of the RHCOS image to use
  --osp-os-flavor <name>            - name of the flavor to use

  --gcp-project-id <name>           - name of the GCP project

  --init                            - initialize the tool and credentials
  --install                         - install the cluster
  --destroy                         - destroy the cluster
  --customize <actions>             - customize the cluster with some post-install actions
  --list                            - lists all existing clusters
  --list-csv                        - lists all existing clusters in CSV format
  --clean-tools                     - removes unecessary CLI clients and all installers

  --force                           - force installation (cleanup files if required)
  --dry-run                         - does all the preparation steps but doesn't run the installer to create/destroy a cluster
  --verbose                         - shows more information during the execution
  --quiet                           - quiet mode (no output at all)
  --help|-h                         - shows this message

Available customizations:
#__CUSTOM_SCRIPTS_NAMES__
EOF
  exit 0
}

# download tools (if required)
download_tools() {
  local tool=${1}

  if [[ $(echo ${INSTALLOPTS[version]} |egrep "latest|stable|candidate|fast") ]];then
    INSTALLOPTS[version]=$( curl -s ${__baseurl}/${INSTALLOPTS[version]}/release.txt | grep "Release Metadata:" -A1 | grep Version | cut -d\: -f 2 | tr -d " " )
    [[ ${INSTALLOPTS[version]} == "" ]] && die "Invalid version, check the version and retry."
    success "Version resolved to ${INSTALLOPTS[version]}."
  fi
  local version=${INSTALLOPTS[version]}

  case ${tool} in
    installer)
      out "→ Checking if installer for ${version} is already present..."
      verbose "  File: ${__bindir}/openshift-install-${version}"
      if [ ! -f ${__bindir}/openshift-install-${version} ]; then
        err "Installer not found. Downloading it..."
        if [[ ${VERBOSE} -eq 1 ]]; then
          wget ${__baseurl}/${version}/openshift-install-linux-${version}.tar.gz -O ${TMPDIR}/openshift-install-linux-${version}.tar.gz
        else
          wget ${__baseurl}/${version}/openshift-install-linux-${version}.tar.gz -O ${TMPDIR}/openshift-install-linux-${version}.tar.gz &>/dev/null
        fi
        success "Installer downloaded successfully."

        out "→ Extracting openshift-install file..."
        tar xfa ${TMPDIR}/openshift-install-linux-${version}.tar.gz -C ${TMPDIR}
        mv -f ${TMPDIR}/openshift-install "${__bindir}/openshift-install-${version}"

        success "Successfuly downloaded installer for ${version}."
      else
        success "Installer for ${version} found. Continuing."
      fi
      ;;

    client)
      out "→ Checking if client binaries for ${version} are already present..."
      verbose "  File: ${__bindir}/oc-${version}"
      if [ ! -f ${__bindir}/oc-${version} ]; then
        err "Client has not found. Downloading it..."
        if [[ ${VERBOSE} -eq 1 ]]; then
          wget ${__baseurl}/${version}/openshift-client-linux-${version}.tar.gz -O ${TMPDIR}/openshift-client-linux-${version}.tar.gz
        else
          wget ${__baseurl}/${version}/openshift-client-linux-${version}.tar.gz -O ${TMPDIR}/openshift-client-linux-${version}.tar.gz &>/dev/null
        fi
        success "Client downloaded successfully."

        echo "→ Extracting oc and kubectl files..."
        tar xfa ${TMPDIR}/openshift-client-linux-${version}.tar.gz -C ${TMPDIR}
        mv -f ${TMPDIR}/oc "${__bindir}/oc-${version}"
        mv -f ${TMPDIR}/kubectl "${__bindir}/kubectl-${version}"

        success "Successfuly downloaded client binaries for ${version}."
      else
        success "Client binaries for ${version} are found. Continuing."
      fi
      ;;
  esac
}

# Clean tools, only enter here if action  "--clean-tools" selected
# Removes all previously downloaded installers and CLI clients of not installed versions
cleantools() {
  out "→ Showing actual filesystem occupation."
  df -h "${__bindir}"
  
  out "→ Cleaning up all installer binaries..."
  rm -f ${__bindir}/openshift-install-[0-9]* && success "All installer removed!"
  
  [ -f ~/.cache/openshift-installer/image_cache/*.ova ] && \
  out "→ Removing OVA images..." && \
  rm -f ~/.cache/openshift-installer/image_cache/*.ova && success "All OVA images removed!"

  # Generate the list
  ls ${__bindir}/{oc,kubectl}-* > /tmp/cli-listxxxxxx.txt

  # Remove versions to maintain from the generated list
  for cluster in $(ls ${__clustersdir});do
    VERSION="$(grep -Po '(?<=OpenShift Installer )[v0-9.]*' ${__clustersdir}/${cluster}/.openshift_install.log 2>/dev/null| head -n 1 | tr -d v)" 
    grep -v ${VERSION} /tmp/cli-listxxxxxx.txt > /tmp/cli-listxxxxxxAPPO.txt
    mv -f /tmp/cli-listxxxxxxAPPO.txt /tmp/cli-listxxxxxx.txt
  done
  # Remove all not used versions
  out "→ Cleaning up all unused CLI clients..."
  cat /tmp/cli-listxxxxxx.txt |xargs rm -f > /dev/null 2>&1 && success "CLI clients removed!"
  
  # Remove the list
  rm -f /tmp/cli-listxxxxxx.txt

  out "→ Showing actual filesystem occupation."
  df -h "${__bindir}"
}

# create install_config.yaml
create_install_config() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}

  out "→ Checking if the cluster directory already exists..."
  verbose "  Directory: ${clusterdir}"
  if [ -d ${clusterdir} ]; then
    if [[ ${FORCE} -eq 0 ]]; then
      die "Directory is already present. Use --force to overwrite it (use with caution) or remove it manually before trying again."
    else
      out "→ Cleaning up existing directory's content..."
      rm -fr ${clusterdir}
    fi
  fi

  mkdir -p ${clusterdir}
  out "→ Creating install-config.yaml file..."
  echo ${INSTALLTEMPLATES[${INSTALLOPTS[platform]}-default]} | base64 -d > ${clusterdir}/install-config.yaml

  sed -i "s/NAME/${INSTALLOPTS[name]}/g;" ${clusterdir}/install-config.yaml
  sed -i "s/DOMAIN/${INSTALLOPTS[domain]}/g;" ${clusterdir}/install-config.yaml
  sed -i "s/REGION/${INSTALLOPTS[region]}/g;" ${clusterdir}/install-config.yaml
  sed -i "s/WORKER-REPLICAS/${INSTALLOPTS[worker-replicas]:-3}/g;" ${clusterdir}/install-config.yaml
  sed -i "s/MASTER-REPLICAS/${INSTALLOPTS[master-replicas]:-3}/g;" ${clusterdir}/install-config.yaml
  sed -i "s/NETWORK-TYPE/${INSTALLOPTS[network-type]:-OpenShiftSDN}/g;" ${clusterdir}/install-config.yaml
  if [[ ${INSTALLOPTS[platform]} == "aws" ]]; then
    sed -i "/TAGS/ {
                      s/ TAGS/${INSTALLOPTS[tags]:-" {}"}/;
                      s/,/\n      /g;
                      s/=/: /g;
	      }" ${clusterdir}/install-config.yaml
  fi
  if [[ ${INSTALLOPTS[platform]} == "vsphere" ]]; then
    sed -i "s/VSPHERE-VIP-API/${INSTALLOPTS[vsphere-vip-api]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-CLUSTER/${INSTALLOPTS[vsphere-cluster]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-DATACENTER/${INSTALLOPTS[vsphere-datacenter]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-DATASTORE/${INSTALLOPTS[vsphere-datastore]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-VIP-INGRESS/${INSTALLOPTS[vsphere-vip-ingress]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-NETWORK/${INSTALLOPTS[vsphere-network]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-PASSWORD/${INSTALLOPTS[vsphere-password]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-USER/${INSTALLOPTS[vsphere-username]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-VCENTER/${INSTALLOPTS[vsphere-vcenter]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-DISK-SIZE-GB/${INSTALLOPTS[vsphere-disk-size-gb]:-120}/g;" ${clusterdir}/install-config.yaml
  fi
  if [[ ${INSTALLOPTS[platform]} == "ovirt" ]]; then
    sed -i "s/OVIRT-VIP-API/${INSTALLOPTS[ovirt-vip-api]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OVIRT-VIP-DNS/${INSTALLOPTS[ovirt-vip-dns]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OVIRT-VIP-INGRESS/${INSTALLOPTS[ovirt-vip-ingress]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OVIRT-CLUSTER/${INSTALLOPTS[ovirt-cluster]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OVIRT-STORAGEDOMAN/${INSTALLOPTS[ovirt-storagedomain]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OVIRT-NETWORK/${INSTALLOPTS[ovirt-network]}/g;" ${clusterdir}/install-config.yaml
  fi
  if [[ ${INSTALLOPTS[platform]} == "openstack" ]]; then
    sed -i "s/OSP-API-FIP/${INSTALLOPTS[osp-vip-api]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OSP-INGRESS-FIP/${INSTALLOPTS[osp-vip-ingress]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OSP-CLOUD/${INSTALLOPTS[osp-cloud]:-openstack}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OSP-EXT-NETWORK/${INSTALLOPTS[osp-ext-network]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OSP-OS-IMAGE/${INSTALLOPTS[osp-os-image]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/OSP-OS-FLAVOR/${INSTALLOPTS[osp-os-flavor]:-m1.large}/g;" ${clusterdir}/install-config.yaml
  fi
  if [[ ${INSTALLOPTS[platform]} == "gcp" ]]; then
    sed -i "s/GCP-PROJECT-ID/${INSTALLOPTS[gcp-project-id]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/REGION/${INSTALLOPTS[region]}/g;" ${clusterdir}/install-config.yaml
  fi

  if [[ ! -f ${__configdir}/pull-secret.json ]]; then
    die "Missing pull secret in ${__configdir}/pull-secret.json. Please create the file before trying again."
  fi
  echo "pullSecret: '$(cat ${__configdir}/pull-secret.json)'" >> ${clusterdir}/install-config.yaml
  if [[ ! -f ${__configdir}/ssh-key.pub ]]; then
    die "Missing public RSA key in ${__configdir}/ssh-key.pub. Please create the file before trying again."
  fi
  echo "sshKey: $(cat ${__configdir}/ssh-key.pub)" >> ${clusterdir}/install-config.yaml

  if [[ ${INSTALLOPTS[platform]} == "azure" ]]; then
    sed -i "s/RESOURCEGROUP/${INSTALLOPTS[azure-resource-group]}/g;" ${clusterdir}/install-config.yaml
  fi

  if [[ ${EDIT_INSTALL_CONFIG} -eq 1 ]]; then
	verbose "Editing install-config with ${WRAPPER_EDITOR}"
	${WRAPPER_EDITOR} "${clusterdir}/install-config.yaml"
  fi


}

# verify cloud credentials
verify_cloud_credentials() {
  local platform=${INSTALLOPTS[platform]}
  local credentials=${CONFIGFILES[${platform}]%%;*}

  verbose "  Credentials file: ${credentials}."
  if [[ ! -f ${credentials} ]]; then
    die "Error: Missing credentials file (${credentials})."
  fi
}

# create cloud credentials
create_cloud_credentials() {
  local platform=${INSTALLOPTS[platform]}
  local credentials=${CONFIGFILES[${platform}]%%;*}
  local content=${CONFIGFILES[${platform}]#*;}

  out "→ Creating target directory..."
  mkdir -p $( dirname ${credentials} )
  verbose "  Directory: $( dirname ${credentials} )."

  out "→ Creating sample cloud credentials file for ${platform}..."
  if [[ -f ${credentials} ]]; then
    if [[ ${FORCE} -eq 0 ]]; then
      die "Credentials file is already present. Use --force to overwrite it (use with caution) or remove it manually before trying again."
    else
      out "→ Cleaning up existing credentials file..."
      rm -fr ${credentials}
    fi
  fi

  echo ${content} | base64 -d > ${credentials}
  success "Created sample file ${credentials}. Please edit it to add the proper credentials for each provider before trying to install any cluster or it will fail."
}

# create cluster
create_cluster() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}
  local installer=${__bindir}/openshift-install-${INSTALLOPTS[version]}

  if [[ ${DRY_RUN} -eq 1 ]]; then
    out "→ Dry-run execution detected. Exiting..."
    exit
  fi

  verbose "  Saving a copy of install-config.yaml file."
  cp ${clusterdir}/install-config.yaml ${clusterdir}/install-config.yaml.orig
  
  if [[ ${EDIT_INSTALL_MANIFESTS} -eq 1 ]]; then
    out "→ Running \"openshift-install\" to create manifests..."
    ${installer} create manifests --dir=${clusterdir}
    success "Manifests created!"
    out "→ Stopping openshift-install-wrapper so you can edit the manifests."
    out "  Manifests have been created at: ${clusterdir}"
    out "  When done, resume openshift-install-wrapper with \"fg\""
    (kill -STOP $$)
    out "→ Resuming openshift-install-wrapper"
  fi

  out "→ Running \"openshift-install\" to create a cluster..."
  verbose "  Command: \"${installer} create cluster --dir=${clusterdir}\""
  if [[ ${VERBOSE} -eq 1 ]]; then
    ${installer} create cluster --dir=${clusterdir}
    success "Cluster created!"
  else
    ${installer} create cluster --dir=${clusterdir} &> ${clusterdir}/.openshift_install_wrapper.log
    success "Cluster created!"
    tail -n 3 ${clusterdir}/.openshift_install_wrapper.log | cut -d \" -f 2- | tr -d "\"$"
  fi
}

# destroy cluster
destroy_cluster() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}
  local installer=${__bindir}/openshift-install-${INSTALLOPTS[version]}

  if [[ ${DRY_RUN} -eq 1 ]]; then
    out "→ Dry-run execution detected. Exiting..."
    exit
  fi

  out "→ Running \"openshift-install\" to destroy a cluster..."
  verbose "  Command: \"${installer} destroy cluster --dir=${clusterdir}\""
  if [[ ${VERBOSE} -eq 1 ]]; then
    ${installer} destroy cluster --dir=${clusterdir}
  else
    ${installer} destroy cluster --dir=${clusterdir} &> ${clusterdir}/.openshift_install_wrapper.log
  fi
  success "Cluster destroyed!"

  out "→ Removing directory..."
  verbose "  Directory: ${clusterdir}"
  rm -fr ${clusterdir}
}

# list clusters
list_clusters() {
  echo "NAME;VERSION;PLATFORM;STATUS;KUBEADMIN_PASSWORD;CONSOLE" > /tmp/list.$$
  for cluster in $(ls ${__clustersdir} );do
    clusterdir=${__clustersdir}/${cluster}

    APISERVER="api.${cluster}"
    CONSOLE="https://console-openshift-console.apps.${cluster}"
    PLATFORM=$((cut -d, -f4 ${clusterdir}/metadata.json 2> /dev/null || echo "Unknown") |cut -d: -f1 |sed s/"[{,},\"]"//g)
    NAME=$((cut -d, -f1 ${clusterdir}/metadata.json 2> /dev/null || echo "Unknown") |cut -d: -f2 |sed s/"[{,},\"]"//g)
    ADMINPWD=$(cat ${clusterdir}/auth/kubeadmin-password 2> /dev/null || echo "Unknown" )
    STATUS=$(curl -m 5 -k https://${APISERVER}:6443/healthz 2> /dev/null || echo "Unhealthy")
    VERSION=$(grep -Po '(?<=OpenShift Installer )[v0-9.]*' ${clusterdir}/.openshift_install.log 2>/dev/null| head -n 1 | tr -d v)
    echo "${NAME};${VERSION};${PLATFORM};${STATUS};${ADMINPWD};${CONSOLE}" >> /tmp/list.$$
  done
  if [[ ${LISTFORMAT} == "csv" ]]; then
    cat /tmp/list.$$
  else
    column -t -s ';' /tmp/list.$$
  fi
  rm -fr /tmp/list.$$
}

# customize a cluster based on a list of scripts
customize_cluster() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}
  local client=${__bindir}/oc-${INSTALLOPTS[version]}

  for script in $( echo ${SCRIPTS} | tr -s "," " " ); do
    cmd=${script%%=*}
    type ${cmd} &>/dev/null && out "→ Running ${cmd} customization..." || die "${cmd} not found."
    ${cmd} ${script} ${clusterdir} ${client} ${VERBOSE} ${QUIET} ${INSTALLOPTS[*]}
  done
}

# find version
get_cluster_version() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}

  if [[ ! -z ${INSTALLOPTS[version]} ]]; then
    verbose "Version already defined with --version parameter to ${INSTALLOPTS[version]}. Skipping version detection..."
    return
  fi

  out "→ Finding version in cluster directory..."
  verbose "  Directory: ${clusterdir}"
  INSTALLOPTS[version]=$(grep -Po '(?<=OpenShift Installer )[v0-9.]*' ${clusterdir}/.openshift_install.log 2>/dev/null| head -n 1 | tr -d v)
  success "Version detected: ${INSTALLOPTS[version]}."

  [[ -z ${INSTALLOPTS[version]} ]] && die "Error: Can't find the installer version in the directory ${clusterdir}. Aborting." || true
}

# find platform
get_cluster_platform() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}

  out "→ Finding platform in cluster directory..."
  verbose "  Directory: ${clusterdir}"
  INSTALLOPTS[platform]=$(grep "^platform:" ${clusterdir}/install-config.yaml.orig -A 1 | tr -d "\n" | grep -Po '(?<=^platform:  )[a-z]*')
  success "Platform detected: ${INSTALLOPTS[platform]}."

  [[ -z ${INSTALLOPTS[platform]} ]] && die "Error: Can't find the platform in the directory ${clusterdir}. Aborting." || true
}

# check for an option
require_option() {
  [[ ${INSTALLOPTS[${1}]} ]] || die "Error: Missing --${1} parameter, required for ${ACTION}."
}

# validate options depending on the choosen action
validate_options() {
  out "→ Validating environment..."

  case ${ACTION} in
    install)
      require_option name
      require_option domain
      require_option version
      require_option platform
      case ${INSTALLOPTS[platform]} in
        aws)
          require_option region
          verify_cloud_credentials
          ;;
        azure)
          require_option region
          require_option azure-resource-group
          verify_cloud_credentials
          ;;
        vsphere)
          require_option vsphere-vcenter
          require_option vsphere-username
          require_option vsphere-password
          require_option vsphere-cluster
          require_option vsphere-datacenter
          require_option vsphere-datastore
          require_option vsphere-network
          require_option vsphere-vip-api
          require_option vsphere-vip-ingress
          ;;
        ovirt)
          require_option ovirt-cluster
          require_option ovirt-storagedomain
          require_option ovirt-network
          require_option ovirt-vip-api
          require_option ovirt-vip-ingress
          require_option ovirt-vip-dns
          ;;
        openstack)
          require_option osp-vip-api
          require_option osp-ext-network
          require_option osp-cloud
          ;;
        gcp)
          require_option gcp-project-id
          require_option region
          ;;
        *)
          die "Error: Platform ${INSTALLOPTS[platform]} not yet supported by this script"
          ;;
      esac
      ;;
    destroy)
      require_option name
      require_option domain
      get_cluster_version
      get_cluster_platform
      if [[ ${INSTALLOPTS[platform]} == "aws" ]] ||  [[ ${INSTALLOPTS[platform]} == "azure" ]] ;then
       verify_cloud_credentials
      fi
      ;;
    customize)
      require_option name
      require_option domain
      get_cluster_version
      get_cluster_platform
      ;;
    list)
      ;;
    init)
      require_option platform
      ;;
    cleantools)
      ;;
    *)
      die "Error: Missing action. Please use --help, --init, --install, --customize, --destroy, --list or --clean-tools."
      ;;
  esac
}

# main function
main() {
  # parse arguments from commandline
  while [[ ${1} = -?* ]]; do
    key="${1}"
    case ${key} in
      --name)        shift; INSTALLOPTS[name]="${1}";;
      --domain)      shift; INSTALLOPTS[domain]="${1}";;
      --version)     shift; INSTALLOPTS[version]="${1}";;
      --platform)    shift; INSTALLOPTS[platform]="${1}";;

      --region)              shift; INSTALLOPTS[region]="${1}";;
      --master-replicas)     shift; INSTALLOPTS[master-replicas]="${1}";;
      --worker-replicas)     shift; INSTALLOPTS[worker-replicas]="${1}";;
      --network-type)        shift; INSTALLOPTS[network-type]="${1}";;
      --tags)                shift; INSTALLOPTS[tags]+=",${1}";;
      --edit-install-config) EDIT_INSTALL_CONFIG=1;;
      --edit-install-manifests) EDIT_INSTALL_MANIFESTS=1;;

      --dev-preview) __baseurl=${__baseurl/\/ocp/\/ocp-dev-preview};;
      --baseurl)     shift; __baseurl="${1}";;

      --azure-resource-group) shift; INSTALLOPTS[azure-resource-group]="${1}";;

      --ovirt-cluster)       shift; INSTALLOPTS[ovirt-cluster]="${1}";;
      --ovirt-storagedomain) shift; INSTALLOPTS[ovirt-storagedomain]="${1}";;
      --ovirt-network)       shift; INSTALLOPTS[ovirt-network]="${1}";;
      --ovirt-vip-api)       shift; INSTALLOPTS[ovirt-vip-api]="${1}";;
      --ovirt-vip-ingress)   shift; INSTALLOPTS[ovirt-vip-ingress]="${1}";;
      --ovirt-vip-dns)       shift; INSTALLOPTS[ovirt-vip-dns]="${1}";;

      --vsphere-vcenter)      shift; INSTALLOPTS[vsphere-vcenter]="${1}";;
      --vsphere-username)     shift; INSTALLOPTS[vsphere-username]="${1}";;
      --vsphere-password)     shift; INSTALLOPTS[vsphere-password]="${1}";;
      --vsphere-cluster)      shift; INSTALLOPTS[vsphere-cluster]="${1}";;
      --vsphere-datacenter)   shift; INSTALLOPTS[vsphere-datacenter]="${1}";;
      --vsphere-datastore)    shift; INSTALLOPTS[vsphere-datastore]="${1}";;
      --vsphere-network)      shift; INSTALLOPTS[vsphere-network]="${1}";;
      --vsphere-vip-api)      shift; INSTALLOPTS[vsphere-vip-api]="${1}";;
      --vsphere-vip-ingress)  shift; INSTALLOPTS[vsphere-vip-ingress]="${1}";;
      --vsphere-disk-size-gb) shift; INSTALLOPTS[vsphere-disk-size-gb]="${1}";;

      --osp-vip-api)          shift; INSTALLOPTS[osp-vip-api]="${1}";;
      --osp-vip-ingress)      shift; INSTALLOPTS[osp-vip-ingress]="${1}";;
      --osp-cloud)            shift; INSTALLOPTS[osp-cloud]="${1}";;
      --osp-ext-network)      shift; INSTALLOPTS[osp-ext-network]="${1}";;
      --osp-os-image)         shift; INSTALLOPTS[osp-os-image]="${1}";;
      --osp-os-flavor)        shift; INSTALLOPTS[osp-os-flavor]="${1}";;

      --gcp-project-id)       shift; INSTALLOPTS[gcp-project-id]="${1}";;

      --init)        ACTION=init;;
      --install)     ACTION=install;;
      --destroy)     ACTION=destroy;;
      --customize)   shift; ACTION=customize; SCRIPTS="${1}";;
      --list)        ACTION=list;;
      --list-csv)    ACTION=list; LISTFORMAT="csv";;
      --clean-tools) ACTION=cleantools ;;

      --force)       FORCE=1;;
      --dry-run)     DRY_RUN=1;;
      --verbose)     VERBOSE=1;;
      --quiet)       QUIET=1;;
      --help|-h)     usage >&2; safe_exit;;
      *)
        die "Error: Invalid option ${1}.\n"
        ;;
    esac
    shift
  done

  WRAPPER_EDITOR="${EDITOR:-vi}"
  verbose "Using ${WRAPPER_EDITOR} as interactive editor"

  # create a temporary dir to work
  TMPDIR=$( mktemp -d -p . )
  verbose "Using ${TMPDIR} as temporary directory"

  # create config dir if doesn't exists
  if [[ ! -d ${__configdir} ]]; then
    mkdir -p ${__configdir} &>/dev/null
    verbose "Creating ${__configdir}. You will probably need to add your ssh-key.pub and pull-secret.json files on it."
  fi

  # check if all the required parameters are provided
  validate_options

  # run the actions
  case ${ACTION} in
    install)
      download_tools installer
      download_tools client
      create_install_config
      create_cluster
      ;;
    destroy)
      download_tools installer
      destroy_cluster
      ;;
    customize)
      get_cluster_version
      download_tools client
      customize_cluster
      ;;
    list)
      list_clusters
      ;;
    init)
      create_cloud_credentials
      ;;
    cleantools)
       cleantools
      ;;
  esac
}

main "$@"
