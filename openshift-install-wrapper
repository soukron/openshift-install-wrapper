#!/usr/bin/env bash

# Description:    Script to run IPI installations from OpenShift 4 where supported
# Author:         Sergio Garcia (soukron@gmbros.net)
# Source/License: https://github.com/soukron/openshift-install-wrapper

# exit immediately on error
set -e

# detect whether output is piped or not.
[[ -t 1 ]] && PIPED=0 || PIPED=1

# some directories
__scriptdir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )
__basedir=~/.local/ocp4
__configdir=${__basedir}/config
__bindir=${__basedir}/bin
__clustersdir=${__basedir}/clusters

# binaries url
__baseurl=https://mirror.openshift.com/pub/openshift-v4/clients/ocp

# defaults
VERSION=1.0.0
VERBOSE=0
QUIET=0
FORCE=0
TMPDIR=
declare -A CONFIGFILES
declare -A INSTALLOPTS
declare -A INSTALLTEMPLATES

# sample credentials files
CONFIGFILES[aws]="${HOME}/.aws/credentials;W2RlZmF1bHRdCmF3c19hY2Nlc3Nfa2V5X2lkID0gMTIzNDU2Nzg5MEFCQ0RFRkdISUoKYXdzX3NlY3JldF9hY2Nlc3Nfa2V5ID0gMTIzNDU2Nzg5MEFCQ0RFRkdISUpLTE1OT2FiY2RlZmdoaWprbG1ubwo="
CONFIGFILES[azure]="${HOME}/.azure/osServicePrincipal.json;eyJzdWJzY3JpcHRpb25JZCI6IjEyMzQ1YWJjLTEyYWItMTJhYi0xMmFiLTEyMzQ1NmFiY2RlZiIsImNsaWVudElkIjoiMTIzNGFiY2QtMTJhYi0xMmFiLTEyYWItMTIzNDU2YWJjZGVmIiwiY2xpZW50U2VjcmV0IjoiMUFfMTIzNDU2YWJjZGVmZzEyMzQ1NTZhYmMuW1x1MDAzY1x1MDAyNmRAWkoja1x1MDAzZSIsInRlbmFudElkIjoiMTIzNDVhYmMtMTJhYi0xMmFiLTEyYWItMTIzNDU2YWJjZGVmIn0K"

# install-config templates
INSTALLTEMPLATES[aws-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbXB1dGU6Ci0gaHlwZXJ0aHJlYWRpbmc6IEVuYWJsZWQKICBuYW1lOiB3b3JrZXIKICBwbGF0Zm9ybToKICAgIGF3czoKICAgICAgdHlwZTogbTUuMnhsYXJnZQogIHJlcGxpY2FzOiAzCmNvbnRyb2xQbGFuZToKICBoeXBlcnRocmVhZGluZzogRW5hYmxlZAogIG5hbWU6IG1hc3RlcgogIHBsYXRmb3JtOiB7fQogIHJlcGxpY2FzOiAzCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZTogTkFNRQpuZXR3b3JraW5nOgogIGNsdXN0ZXJOZXR3b3JrOgogIC0gY2lkcjogMTAuMTI4LjAuMC8xNAogICAgaG9zdFByZWZpeDogMjMKICBtYWNoaW5lTmV0d29yazoKICAtIGNpZHI6IDEwLjAuMC4wLzE2CiAgbmV0d29ya1R5cGU6IE9wZW5TaGlmdFNETgogIHNlcnZpY2VOZXR3b3JrOgogIC0gMTcyLjMwLjAuMC8xNgpwbGF0Zm9ybToKICBhd3M6CiAgICByZWdpb246IFJFR0lPTgpwdWJsaXNoOiBFeHRlcm5hbAo=
INSTALLTEMPLATES[azure-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbXB1dGU6Ci0gYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogd29ya2VyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IDMKY29udHJvbFBsYW5lOgogIGFyY2hpdGVjdHVyZTogYW1kNjQKICBoeXBlcnRocmVhZGluZzogRW5hYmxlZAogIG5hbWU6IG1hc3RlcgogIHBsYXRmb3JtOiB7fQogIHJlcGxpY2FzOiAzCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZTogTkFNRQpuZXR3b3JraW5nOgogIGNsdXN0ZXJOZXR3b3JrOgogIC0gY2lkcjogMTAuMTI4LjAuMC8xNAogICAgaG9zdFByZWZpeDogMjMKICBtYWNoaW5lTmV0d29yazoKICAtIGNpZHI6IDEwLjAuMC4wLzE2CiAgbmV0d29ya1R5cGU6IE9wZW5TaGlmdFNETgogIHNlcnZpY2VOZXR3b3JrOgogIC0gMTcyLjMwLjAuMC8xNgpwbGF0Zm9ybToKICBhenVyZToKICAgIGJhc2VEb21haW5SZXNvdXJjZUdyb3VwTmFtZTogUkVTT1VSQ0VHUk9VUAogICAgcmVnaW9uOiBSRUdJT04KcHVibGlzaDogRXh0ZXJuYWwK
INSTALLTEMPLATES[vsphere-default]=YXBpVmVyc2lvbjogdjEKYmFzZURvbWFpbjogRE9NQUlOCmNvbXB1dGU6Ci0gYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIGh5cGVydGhyZWFkaW5nOiBFbmFibGVkCiAgbmFtZTogd29ya2VyCiAgcGxhdGZvcm06IHt9CiAgcmVwbGljYXM6IDMKY29udHJvbFBsYW5lOgogIGFyY2hpdGVjdHVyZTogYW1kNjQKICBoeXBlcnRocmVhZGluZzogRW5hYmxlZAogIG5hbWU6IG1hc3RlcgogIHBsYXRmb3JtOiB7fQogIHJlcGxpY2FzOiAzCm1ldGFkYXRhOgogIGNyZWF0aW9uVGltZXN0YW1wOiBudWxsCiAgbmFtZTogTkFNRQpuZXR3b3JraW5nOgogIGNsdXN0ZXJOZXR3b3JrOgogIC0gY2lkcjogMTAuMTI4LjAuMC8xNAogICAgaG9zdFByZWZpeDogMjMKICBtYWNoaW5lTmV0d29yazoKICAtIGNpZHI6IDEwLjAuMC4wLzE2CiAgbmV0d29ya1R5cGU6IE9wZW5TaGlmdFNETgogIHNlcnZpY2VOZXR3b3JrOgogIC0gMTcyLjMwLjAuMC8xNgpwbGF0Zm9ybToKICB2c3BoZXJlOgogICAgYXBpVklQOiBWU1BIRVJFLVZJUC1BUEkKICAgIGNsdXN0ZXI6IFZTUEhFUkUtQ0xVU1RFUgogICAgZGF0YWNlbnRlcjogVlNQSEVSRS1EQVRBQ0VOVEVSCiAgICBkZWZhdWx0RGF0YXN0b3JlOiBWU1BIRVJFLURBVEFTVE9SRQogICAgaW5ncmVzc1ZJUDogVlNQSEVSRS1WSVAtSU5HUkVTUwogICAgbmV0d29yazogVlNQSEVSRS1ORVRXT1JLCiAgICBwYXNzd29yZDogVlNQSEVSRS1QQVNTV09SRAogICAgdXNlcm5hbWU6IFZTUEhFUkUtVVNFUgogICAgdkNlbnRlcjogVlNQSEVSRS1WQ0VOVEVSCnB1Ymxpc2g6IEV4dGVybmFsCg==

# cleanup on exit
cleanup_on_exit() {
  [[ ! -v KEEPTMP ]] && rm -fr ${TMPDIR}
  popd &>/dev/null
  kill 0
}
safe_exit() {
  trap - INT TERM EXIT
  exit
}
trap cleanup_on_exit INT TERM EXIT

# output helpers
out() {
  [[ ${QUIET} -eq 1 ]] && return

  local message="$@"
  if ((PIPED)); then
    message=$(echo $message | sed '
      s/\\[0-9]\{3\}\[[0-9]\(;[0-9]\{2\}\)\?m//g;
      s/✖/Error:/g;
      s/✔/Success:/g;
    ')
  fi
  printf '%b\n' "$message";
}
die() { err "$@"; exit 1; } >&2
err() { out " \033[1;31m✖\033[0m  $@"; } >&2
success() { out " \033[1;32m✔\033[0m  $@"; }
verbose() { [[ ${VERBOSE} -eq 1 ]] && out "$@" || true; }

# usage
usage() {
  cat <<EOF
OpenShift installation wrapper for IPI installations. Version: ${VERSION}

Usage: `basename ${0}` [--init|--install|--destroy|--customize] [options]

Options:
  --name <name>                  - name of the cluster
  --domain <domain>              - name of the domain for the cluster
  --version <version>            - version to install
  --platform <name>              - cloud provider (only aws supported for now)
  --region <name>                - cloud provider region
  --vsphere-vcenter <name>       - fqdn or IP address of vCenter
  --vsphere-user <username>      - username to login to vCenter
  --vsphere-password <password>  - password to login to vCenter 
  --vsphere-cluster <name>       - vCenter cluster name
  --vsphere-datacenter <name>    - vCenter datacenter name 
  --vsphere-datastore <name>     - vCenter datastore name 
  --vsphere-network <name>       - vCenter network name 
  --vsphere-vip-api <IP>         - IP address the cluster's API
  --vsphere-vip-ingress <IP>     - IP address for the cluster's ingress
  --force                        - force installation (cleanup files if required)
  --init                         - initialize the tool and credentials
  --install                      - install the cluster
  --destroy                      - destroy the cluster
  --customize                    - customize the cluster with some post-install actions
  --list                         - lists all existing clusters
  --verbose                      - shows more information during the execution
  --quiet                        - quiet mode (no output at all)
  --help|-h                      - shows this message
  --azure-resource-group         - provide the ResourceGroup where the domain exists
EOF
  exit 0
}

# download tools (if required)
download_tools() {
  local version=${INSTALLOPTS[version]}
  local tool=${1}

  case ${tool} in
    installer)
      out "→ Checking if installer for ${version} is already present..."
      verbose "  File: ${__bindir}/openshift-install-${version}"
      if [ ! -f ${__bindir}/openshift-install-${version} ]; then
        err "Installer not found. Downloading it..."
        if [[ ${VERBOSE} -eq 1 ]]; then
          wget ${__baseurl}/${version}/openshift-install-linux-${version}.tar.gz -O ${TMPDIR}/openshift-install-linux-${version}.tar.gz
        else
          wget ${__baseurl}/${version}/openshift-install-linux-${version}.tar.gz -O ${TMPDIR}/openshift-install-linux-${version}.tar.gz &>/dev/null
        fi
        success "Installer downloaded successfully."

        out "→ Extracting openshift-install file..."
        tar xfa ${TMPDIR}/openshift-install-linux-${version}.tar.gz -C ${TMPDIR}
        mv -f ${TMPDIR}/openshift-install "${__bindir}/openshift-install-${version}"

        success "Successfuly downloaded installer for ${version}."
      else
        success "Installer for ${version} found. Continuing."
      fi
      ;;

    client)
      out "→ Checking if client binaries for ${version} are already present..."
      verbose "  File: ${__bindir}/oc-${version}"
      if [ ! -f ${__bindir}/oc-${version} ]; then
        err "Client has not found. Downloading it..."
        if [[ ${VERBOSE} -eq 1 ]]; then
          wget ${__baseurl}/${version}/openshift-client-linux-${version}.tar.gz -O ${TMPDIR}/openshift-client-linux-${version}.tar.gz
        else
          wget ${__baseurl}/${version}/openshift-client-linux-${version}.tar.gz -O ${TMPDIR}/openshift-client-linux-${version}.tar.gz &>/dev/null
        fi
        success "Client downloaded successfully."

        echo "→ Extracting oc and kubectl files..."
        tar xfa ${TMPDIR}/openshift-client-linux-${version}.tar.gz -C ${TMPDIR}
        mv -f ${TMPDIR}/oc "${__bindir}/oc-${version}"
        mv -f ${TMPDIR}/kubectl "${__bindir}/kubectl-${version}"

        success "Successfuly downloaded client binaries for ${version}."
      else
        success "Client binaries for ${version} are found. Continuing."
      fi
      ;;
  esac
}

# create install_config.yaml
create_install_config() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}

  out "→ Checking if the cluster directory already exists..."
  verbose "  Directory: ${clusterdir}"
  if [ -d ${clusterdir} ]; then
    if [[ ${FORCE} -eq 0 ]]; then
      die "Directory is already present. Use --force to overwrite it (use with caution) or remove it manually before trying again."
    else
      out "→ Cleaning up existing directory's content..."
      rm -fr ${clusterdir}
    fi
  fi

  mkdir -p ${clusterdir}
  out "→ Creating install-config.yaml file..."
  echo ${INSTALLTEMPLATES[${INSTALLOPTS[platform]}-default]} | base64 -d > ${clusterdir}/install-config.yaml

  sed -i "s/NAME/${INSTALLOPTS[name]}/g;" ${clusterdir}/install-config.yaml
  sed -i "s/DOMAIN/${INSTALLOPTS[domain]}/g;" ${clusterdir}/install-config.yaml
  sed -i "s/REGION/${INSTALLOPTS[region]}/g;" ${clusterdir}/install-config.yaml
  if [[ ${INSTALLOPTS[platform]} == "vsphere" ]]; then
    sed -i "s/VSPHERE-VIP-API/${INSTALLOPTS[vsphere-vip-api]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-CLUSTER/${INSTALLOPTS[vsphere-cluster]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-DATACENTER/${INSTALLOPTS[vsphere-datacenter]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-DATASTORE/${INSTALLOPTS[vsphere-datastore]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-VIP-INGRESS/${INSTALLOPTS[vsphere-vip-ingress]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-NETWORK/${INSTALLOPTS[vsphere-network]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-PASSWORD/${INSTALLOPTS[vsphere-password]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-USER/${INSTALLOPTS[vsphere-username]}/g;" ${clusterdir}/install-config.yaml
    sed -i "s/VSPHERE-VCENTER/${INSTALLOPTS[vsphere-vcenter]}/g;" ${clusterdir}/install-config.yaml
  fi

  if [[ ! -f ${__configdir}/pull-secret.json ]]; then
    die "Missing pull secret in ${__configdir}/pull-secret.json. Please create the file before trying again."
  fi
  echo "pullSecret: '$(cat ${__configdir}/pull-secret.json)'" >> ${clusterdir}/install-config.yaml
  if [[ ! -f ${__configdir}/ssh-key.pub ]]; then
    die "Missing public RSA key in ${__configdir}/ssh-key.pub. Please create the file before trying again."
  fi
  echo "sshKey: $(cat ${__configdir}/ssh-key.pub)" >> ${clusterdir}/install-config.yaml

  if [[ ${INSTALLOPTS[platform]} == "azure" ]]; then
    sed -i "s/RESOURCEGROUP/${INSTALLOPTS[azure-resource-group]}/g;" ${clusterdir}/install-config.yaml
  fi
}

# verify cloud credentials
verify_cloud_credentials() {
  local platform=${INSTALLOPTS[platform]}
  local credentials=${CONFIGFILES[${platform}]%%;*}

  verbose "  Credentials file: ${credentials}."
  if [[ ! -f ${credentials} ]]; then
    die "Error: Missing credentials file (${credentials})."
  fi
}

# create cloud credentials
create_cloud_credentials() {
  local platform=${INSTALLOPTS[platform]}
  local credentials=${CONFIGFILES[${platform}]%%;*}
  local content=${CONFIGFILES[${platform}]#*;}

  out "→ Creating target directory..."
  mkdir -p $( dirname ${credentials} )
  verbose "  Directory: $( dirname ${credentials} )."

  out "→ Creating sample cloud credentials file for ${platform}..."
  if [[ -f ${credentials} ]]; then
    if [[ ${FORCE} -eq 0 ]]; then
      die "Credentials file is already present. Use --force to overwrite it (use with caution) or remove it manually before trying again."
    else
      out "→ Cleaning up existing credentials file..."
      rm -fr ${credentials}
    fi
  fi

  echo ${content} | base64 -d > ${credentials}
  success "Created sample file ${credentials}. Please edit it to add the proper credentials for each provider before trying to install any cluster or it will fail."
}

# create cluster
create_cluster() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}
  local installer=${__bindir}/openshift-install-${INSTALLOPTS[version]}
  
  out "→ Running \"openshift-install\" to create a cluster..."
  verbose "  Command: \"${installer} create cluster --dir=${clusterdir}\""
  if [[ ${VERBOSE} -eq 1 ]]; then
    ${installer} create cluster --dir=${clusterdir}
    success "Cluster created!"
  else
    ${installer} create cluster --dir=${clusterdir} &> ${clusterdir}/.openshift_install_wrapper.log
    success "Cluster created!"
    tail -n 3 ${clusterdir}/.openshift_install_wrapper.log | cut -d \" -f 2
  fi
}

# destroy cluster
destroy_cluster() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}
  local installer=${__bindir}/openshift-install-${INSTALLOPTS[version]}
  
  out "→ Running \"openshift-install\" to destroy a cluster..."
  verbose "  Command: \"${installer} destroy cluster --dir=${clusterdir}\""
  if [[ ${VERBOSE} -eq 1 ]]; then
    ${installer} destroy cluster --dir=${clusterdir}
  else
    ${installer} destroy cluster --dir=${clusterdir} &> ${clusterdir}/.openshift_install_wrapper.log
  fi
  success "Cluster destroyed!"

  out "→ Removing directory..."
  verbose "  Directory: ${clusterdir}"
  rm -fr ${clusterdir}
}

# list clusters
list_clusters() {
  ls -l ${__clustersdir} | grep -v $( basename ${TMPDIR} )
}

# find version
get_cluster_version() {
  local clusterdir=${__clustersdir}/${INSTALLOPTS[name]}.${INSTALLOPTS[domain]}

  out "→ Finding version in cluster directory..."
  verbose "  Directory: ${clusterdir}"
  INSTALLOPTS[version]=$(grep -Po '(?<=OpenShift Installer )[v0-9.]*' ${clusterdir}/.openshift_install.log 2>/dev/null| head -n 1 | tr -d v)
  success "Version detected: ${INSTALLOPTS[version]}."

  [[ -z ${INSTALLOPTS[version]} ]] && die "Error: Can't find the installer version in the directory ${clusterdir}. Aborting." || true
}

# check for an option
require_option() {
  [[ ${INSTALLOPTS[${1}]} ]] || die "Error: Missing --${1} parameter, required for ${ACTION}."
}

# validate options depending on the choosen action
validate_options() {
  out "→ Validating environment..."

  case ${ACTION} in
    install)
      require_option name
      require_option domain
      require_option version
      require_option platform
      [[ ${INSTALLOPTS[platform]} == "aws" ]] || [[ ${INSTALLOPTS[platform]} == "azure" ]] && require_option region
      [[ ${INSTALLOPTS[platform]} == "azure" ]] && require_option azure-resource-group
      if [[ ${INSTALLOPTS[platform]} == "vsphere" ]]; then 
	require_option vsphere-vcenter
        require_option vsphere-username
        require_option vsphere-password
        require_option vsphere-cluster
        require_option vsphere-datacenter
        require_option vsphere-datastore
        require_option vsphere-network
        require_option vsphere-vip-api
        require_option vsphere-vip-ingress
      fi
      ;;
    destroy)
      require_option name
      require_option domain
      ;;
    list)
      list_clusters
      ;;
    init)
      require_option platform
      create_cloud_credentials
      ;;
    customize)
      die "This option is not yet implemented"
      ;;
    *)
      die "Error: Missing action. Please use --help, --init, --install, --customize, --destroy or --list."
      ;;
  esac

  
  if [[ ${ACTION} == "install" ]] || [[ ${ACTION} == "destroy" ]] || [[ ${ACTION} == "customize" ]]; then
    case ${INSTALLOPTS[platform]} in
      aws|azure)
        verbose "  Platform: ${INSTALLOPTS[platform]}"
        verify_cloud_credentials
        ;;
      vsphere)
        verbose "  Platform: ${INSTALLOPTS[platform]}"
        ;;
      *)
        die "Error: Platform ${INSTALLOPTS[platform]} not yet supported by this script"
        ;;
     esac
  fi
}

# main function
main() {
  # parse arguments from commandline
  while [[ ${1} = -?* ]]; do
    key="${1}"
    case ${key} in
      --name)        shift; INSTALLOPTS[name]="${1}";;
      --domain)      shift; INSTALLOPTS[domain]="${1}";;
      --version)     shift; INSTALLOPTS[version]="${1}";;
      --platform)    shift; INSTALLOPTS[platform]="${1}";;
      --region)      shift; INSTALLOPTS[region]="${1}";;
      --force)       FORCE=1;;
      --init)        ACTION=init;;
      --install)     ACTION=install;;
      --customize)   ACTION=customize;;
      --destroy)     ACTION=destroy;;
      --list)        ACTION=list;;
      --verbose)     VERBOSE=1;;
      --quiet)       QUIET=1;;
      --help|-h)     usage >&2; safe_exit;;
      --azure-resource-group) shift; INSTALLOPTS[azure-resource-group]="${1}";;
      --vsphere-vcenter)     shift; INSTALLOPTS[vsphere-vcenter]="${1}";;
      --vsphere-username)    shift; INSTALLOPTS[vsphere-username]="${1}";;
      --vsphere-password)    shift; INSTALLOPTS[vsphere-password]="${1}";;
      --vsphere-cluster)     shift; INSTALLOPTS[vsphere-cluster]="${1}";;
      --vsphere-datacenter)  shift; INSTALLOPTS[vsphere-datacenter]="${1}";;
      --vsphere-datastore)   shift; INSTALLOPTS[vsphere-datastore]="${1}";;
      --vsphere-network)     shift; INSTALLOPTS[vsphere-network]="${1}";;
      --vsphere-vip-api)     shift; INSTALLOPTS[vsphere-vip-api]="${1}";;
      --vsphere-vip-ingress) shift; INSTALLOPTS[vsphere-vip-ingress]="${1}";;
      *)
        die "Error: Invalid option ${1}.\n"
        ;;
    esac
    shift
  done

  # create a temporary dir to work
  TMPDIR=$( mktemp -d -p . )
  verbose "Using ${TMPDIR} as temporary directory"
  
  validate_options
  case ${ACTION} in
    install)
      download_tools installer
      create_install_config
      create_cluster
      ;;
    destroy)
      get_cluster_version
      download_tools installer
      destroy_cluster
      ;;
  esac  
}

main "$@"
