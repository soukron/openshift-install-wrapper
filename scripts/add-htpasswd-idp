#!/bin/bash

# Optional fields
# script name: add-htpasswd-idp
# script description: Install a sample htpasswd file with admin, user and guest users

# Mandatory function
# start main - do not remove this line and do not change the function name
main() {
  # check if htpasswd is available
  if ! command -v htpasswd &> /dev/null
  then
    err "htpasswd is required to run add-htpasswd-idp"
    exit
  fi

  # parse parameters from ${1}, if any
  if [[ ${1} == *"="* ]]; then
    success "Using custom users from command line parameters."

    # NOTE: I tried to use bash substring extraction but failed when merging the script due to the # character
    IFS=':' read -r -a params <<< $( echo "${1}" | cut -d= -f2- )

    for index in "${!params[@]}"; do
      # use -bc only for the first user
      [ ${index} -eq 0 ] && htpasswdargs="-bc" || htpasswdargs="-b"

      # add each user in the file
      # NOTE: I tried to use bash substring extraction but failed when merging the script
      user=$( echo ${params[index]} | cut -d = -f 1 )
      password=$( echo ${params[index]} | cut -d = -f 2 )
      htpasswd $htpasswdargs /tmp/htpasswd.tmp.$$ ${user} ${password} &>/dev/null \
        && verbose "Adding user ${user} with password ${password}." \
        || err "Error adding user ${password}. Skipping."

      # if the user is named "admin" add it as a cluster-admin
      if [ "${user}" == "admin" ]; then
        oc adm policy add-cluster-role-to-user cluster-admin admin \
           && verbose "User \"admin\" has been configured as a cluster-admin." \
           || err "Error adding \"admin\" as a cluster-admin. Skipping."
      fi
    done

    # get the base64 content and delete it
    HTPASSWD=$( cat /tmp/htpasswd.tmp.$$ | base64 -w 0 )
    rm -fr /tmp/htpasswd.tmp.$$
  else
    success "Adding default users: admin, user and guest."
    # Users: admin, user, guest
    # Passwords are generated based on the username
    # Tip: function claveOCP() { echo $1$1$1 | base64 -w8 | head -n 1; }
    HTPASSWD=YWRtaW46JGFwcjEkR2pDNi9TZHMkcTBWTElmaU5paE8vRXpNdmxNM2w3MAp1c2VyOiRhcHIxJDlQcGM4NnNvJE5NMEJCNFNzamNNbXgxTDlEU2FPMi8KZ3Vlc3Q6JGFwcjEkeWc1L1puTVkkZS5uSkROV0dNODlLQUVQVjVjSWY3MQo=

    oc adm policy add-cluster-role-to-user cluster-admin admin \
       && verbose "User \"admin\" has been configured as a cluster-admin." \
       || err "Error adding \"admin\" as a cluster-admin. Skipping."
  fi

  # Create htpassw-secret
  cat <<EOF | oc apply -f - \
                  && success "Secret htpasswd-secret created/configured successfully." \
                  || die "Error creating htpasswd-secret."
apiVersion: v1
kind: Secret
metadata:
  name: htpasswd-secret
  namespace: openshift-config
type: Opaque
data:
  htpasswd: ${HTPASSWD}
EOF

  # Configure the OAuth/cluster
  # TODO: convert this in a patch command so it doesn't deletes other configured IDP
  cat <<EOF | oc apply -f - \
                  && success "OAuth/cluster successfully configured." \
                  || die "Error applying configuration to OAuth/cluster."
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: htpasswd
    challenge: true
    login: true
    mappingMethod: claim
    type: HTPasswd
    htpasswd:
      fileData:
        name: htpasswd-secret
EOF
}
# end main - do not remove this line

# Optionally, keep this if you want to run your script manually or for testing.
main $@
